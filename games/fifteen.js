// === –ò–≥—Ä–∞ "–ü—è—Ç–Ω–∞—à–∫–∏" ===
let state = 1;
let puzzle;
let winModal; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
let restartBtn; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
let menuBtn; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
let victorySound; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–≤—É–∫–∞

document.addEventListener('DOMContentLoaded', function () {
    const wrap = document.getElementById('wrap');
    const canvas = document.getElementById('c');
    const ctx = canvas.getContext('2d');
    let w, h;
    function resize() {
        w = canvas.width = canvas.offsetWidth;
        h = canvas.height = canvas.offsetHeight;
    }
    window.addEventListener('resize', resize);
    resize();
    // === –ó–≤—ë–∑–¥—ã/–°–æ–ª–Ω—Ü–µ ===
    const particles = [];
    const particleCount = 100;
    class Particle {
        constructor() {
            this.reset();
        }
        reset() {
            this.x = Math.random() * w;
            this.y = Math.random() * h;
            this.size = Math.random() * 2 + 1;
            this.speed = Math.random() * 0.5 + 0.1;
            this.angle = Math.random() * Math.PI * 2;
            this.spin = (Math.random() - 0.5) * 0.05;
        }
        update() {
            this.y += this.speed;
            this.angle += this.spin;
            if (this.y > h) {
                this.reset();
                this.y = 0;
            }
        }
        draw() {
            ctx.save();
            ctx.translate(this.x, this.y);
            ctx.rotate(this.angle);
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.arc(0, 0, this.size, 0, Math.PI * 2);
            ctx.fill();
            ctx.restore();
        }
    }
    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
    for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle());
    }
    // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
    function animate() {
        ctx.clearRect(0, 0, w, h);
        // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        const gradient = ctx.createRadialGradient(w/2, h/2, 0, w/2, h/2, Math.max(w, h)/2);
        // --- –ù–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç (—á–µ—Ä–Ω–æ-—Å–≤–µ—Ç–ª—ã–π), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º—É body –≤ HTML ---
        gradient.addColorStop(0, '#000000'); // –¶–µ–Ω—Ç—Ä - —á—ë—Ä–Ω—ã–π
        gradient.addColorStop(1, '#1f1e1e'); // –ö—Ä–∞—è - —Å–µ—Ä–æ–≤–∞—Ç–æ-—á—ë—Ä–Ω—ã–π
        // --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ ---
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, w, h);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º —á–∞—Å—Ç–∏—Ü—ã
        particles.forEach(p => {
            p.update();
            p.draw();
        });
        requestAnimationFrame(animate);
    }
    animate();
    // === –ò–≥—Ä–∞ "–ü—è—Ç–Ω–∞—à–∫–∏" ===
    puzzle = document.getElementById('puzzle-container');
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    winModal = document.getElementById('winModal');
    restartBtn = document.getElementById('restartBtn');
    menuBtn = document.getElementById('menuBtn');
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∑–≤—É–∫–∞
    victorySound = document.getElementById('victorySound');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    restartBtn.addEventListener('click', function() {
        scramble(); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        winModal.classList.remove('show'); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    });

    menuBtn.addEventListener('click', function() {
        window.location.href = '../index.html'; // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    });

    document.getElementById('solve').addEventListener('click', solve);
    document.getElementById('scramble').addEventListener('click', scramble);
    solve(); // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é (—Ä–µ—à–µ–Ω–Ω—É—é) –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É
});

function solve() {
    if (state == 0) {
        return;
    }
    puzzle.innerHTML = '';
    let n = 1;
    for (let i = 0; i <= 3; i++) {
        for (let j = 0; j <= 3; j++) {
            const cell = document.createElement('span');
            cell.id = 'cell-' + i + '-' + j;
            cell.style.left = (j * 80 + 1 * j + 1) + 'px';
            cell.style.top = (i * 80 + 1 * i + 1) + 'px';
            if (n <= 15) {
                cell.classList.add('number');
                cell.innerHTML = (n++).toString();
            } else {
                cell.className = 'empty';
            }
            puzzle.appendChild(cell);
        }
    }
}

function shiftCell(cell) {
    if (cell.className != 'empty') {
        const emptyCell = getEmptyAdjacentCell(cell);
        if (emptyCell) {
            const tmp = { style: cell.style.cssText, id: cell.id };
            cell.style.cssText = emptyCell.style.cssText;
            cell.id = emptyCell.id;
            emptyCell.style.cssText = tmp.style;
            emptyCell.id = tmp.id;
            if (state == 1) {
                setTimeout(checkOrder, 150);
            }
        }
    }
}

function getCell(row, col) {
    return document.getElementById('cell-' + row + '-' + col);
}

function getEmptyCell() {
    return puzzle.querySelector('.empty');
}

function getEmptyAdjacentCell(cell) {
    const adjacent = getAdjacentCells(cell);
    for (let i = 0; i < adjacent.length; i++) {
        if (adjacent[i].className == 'empty') {
            return adjacent[i];
        }
    }
    return false;
}

function getAdjacentCells(cell) {
    const id = cell.id.split('-');
    const row = parseInt(id[1]);
    const col = parseInt(id[2]);
    const adjacent = [];
    if (row < 3) { adjacent.push(getCell(row + 1, col)); }
    if (row > 0) { adjacent.push(getCell(row - 1, col)); }
    if (col < 3) { adjacent.push(getCell(row, col + 1)); }
    if (col > 0) { adjacent.push(getCell(row, col - 1)); }
    return adjacent;
}

function checkOrder() {
    if (getEmptyCell().id != 'cell-3-3') {
        return;
    }
    let n = 1;
    for (let i = 0; i <= 3; i++) {
        for (let j = 0; j <= 3; j++) {
            if (n <= 15 && getCell(i, j).innerHTML != n.toString()) {
                return;
            }
            n++;
        }
    }
    // Puzzle solved
    // alert('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–±—Ä–∞–ª–∏ –ø–∞–∑–ª!');
    // --- –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –≤–º–µ—Å—Ç–æ alert ---
    // –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
    victorySound.currentTime = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    victorySound.play().catch(e => console.log("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", e)); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏

    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    confetti({
        particleCount: 150,
        spread: 70,
        origin: { y: 0.6 }
    });

    // –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    winModal.classList.add('show');
    // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
}

function scramble() {
    if (state == 0) {
        return;
    }
    puzzle.removeAttribute('class');
    state = 0;
    let previousCell;
    let i = 1;
    const interval = setInterval(function () {
        if (i <= 100) {
            const emptyCell = getEmptyCell();
            if (!emptyCell) {
                clearInterval(interval);
                state = 1;
                return;
            }
            const adjacent = getAdjacentCells(emptyCell);
            if (previousCell) {
                for (let j = adjacent.length - 1; j >= 0; j--) {
                    if (adjacent[j].innerHTML == previousCell.innerHTML) {
                        adjacent.splice(j, 1);
                    }
                }
            }
            if (adjacent.length > 0) {
                previousCell = adjacent[Math.floor(Math.random() * adjacent.length)];
                shiftCell(previousCell);
            }
            i++;
        } else {
            clearInterval(interval);
            puzzle.className = 'animate';
            state = 1;
        }
    }, 5);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø–∞–∑–ª–∞
document.addEventListener('click', function (e) {
    if (e.target.id && e.target.id.startsWith('cell-')) {
        if (state == 1) {
            puzzle.className = 'animate';
            shiftCell(e.target);
        }
    }
});